#!/usr/bin/env python3
"""
Test sp√©cifique pour la fonctionnalit√© de collecte automatique des gains VIP
Selon la review request fran√ßaise
"""

import requests
import json
import sys
from datetime import datetime

# Get backend URL from frontend .env file
def get_backend_url():
    try:
        with open('/app/frontend/.env', 'r') as f:
            for line in f:
                if line.startswith('REACT_APP_BACKEND_URL='):
                    return line.split('=', 1)[1].strip()
    except FileNotFoundError:
        return "http://localhost:8001"
    return "http://localhost:8001"

BACKEND_URL = get_backend_url()
API_BASE = f"{BACKEND_URL}/api"

def test_vip_automatic_collection():
    """Test FRENCH REVIEW REQUEST: Tester la nouvelle fonctionnalit√© de collecte automatique des gains VIP"""
    print("\nüá´üá∑ TESTING VIP AUTOMATIC COLLECTION SYSTEM - FRENCH REVIEW REQUEST")
    print("=" * 80)
    print("OBJECTIF: Confirmer que les gains VIP sont maintenant collect√©s automatiquement d√®s qu'une partie se termine")
    print("TESTS √Ä EFFECTUER:")
    print("1. Test de cr√©ation de partie avec VIPs")
    print("2. Test de simulation jusqu'√† la fin")
    print("3. Test de collecte automatique des gains VIP")
    print("4. Test de coh√©rence")
    print()
    
    # Test 1: Cr√©er une partie standard avec des joueurs et v√©rifier que des VIPs sont assign√©s au salon VIP
    print("üîç TEST 1: CR√âATION DE PARTIE AVEC VIPS")
    print("-" * 60)
    
    game_request = {
        "player_count": 30,
        "game_mode": "standard", 
        "selected_events": [1, 2, 3, 4],
        "manual_players": []
    }
    
    response = requests.post(f"{API_BASE}/games/create", 
                           json=game_request, 
                           headers={"Content-Type": "application/json"},
                           timeout=15)
    
    if response.status_code != 200:
        print(f"‚ùå √âCHEC: Could not create game - HTTP {response.status_code}")
        print(f"   D√©tails: {response.text}")
        return False
        
    game_data = response.json()
    game_id = game_data.get('id')
    print(f"   ‚úÖ Partie cr√©√©e avec ID: {game_id}")
    print(f"   ‚úÖ Nombre de joueurs: {len(game_data.get('players', []))}")
    
    # V√©rifier les VIPs assign√©s au salon VIP niveau 3 (5 VIPs)
    vips_response = requests.get(f"{API_BASE}/vips/game/{game_id}?salon_level=3", timeout=10)
    
    if vips_response.status_code != 200:
        print(f"‚ùå √âCHEC: Could not get VIPs - HTTP {vips_response.status_code}")
        return False
        
    vips_data = vips_response.json()
    
    if not isinstance(vips_data, list) or len(vips_data) != 5:
        print(f"‚ùå √âCHEC: Expected 5 VIPs for salon level 3, got {len(vips_data) if isinstance(vips_data, list) else 'non-list'}")
        return False
    
    # R√©cup√©rer les VIPs assign√©s et noter leurs viewing_fee totaux
    total_vip_viewing_fees = sum(vip.get('viewing_fee', 0) for vip in vips_data)
    print(f"   ‚úÖ {len(vips_data)} VIPs assign√©s au salon VIP niveau 3")
    print(f"   ‚úÖ Viewing_fee total des VIPs: {total_vip_viewing_fees:,}$")
    
    # Afficher d√©tails des VIPs
    for i, vip in enumerate(vips_data):
        print(f"   - VIP {i+1}: {vip.get('name', 'Unknown')} - {vip.get('viewing_fee', 0):,}$")
    
    # Test 2: Simuler des √©v√©nements jusqu'√† ce qu'il y ait un gagnant (completed=true)
    print("\nüîç TEST 2: SIMULATION JUSQU'√Ä LA FIN")
    print("-" * 60)
    
    max_simulations = 10
    simulation_count = 0
    
    while simulation_count < max_simulations:
        simulation_count += 1
        sim_response = requests.post(f"{API_BASE}/games/{game_id}/simulate-event", timeout=10)
        
        if sim_response.status_code != 200:
            print(f"‚ùå √âCHEC: Event simulation failed - HTTP {sim_response.status_code}")
            return False
        
        sim_data = sim_response.json()
        game_state = sim_data.get('game', {})
        
        alive_count = len([p for p in game_state.get('players', []) if p.get('alive', False)])
        print(f"   √âv√©nement {simulation_count}: {alive_count} survivants")
        
        if game_state.get('completed', False):
            winner = game_state.get('winner', {})
            print(f"   ‚úÖ Partie termin√©e apr√®s {simulation_count} √©v√©nements")
            print(f"   ‚úÖ Gagnant: {winner.get('name', 'Inconnu')} (#{winner.get('number', 'N/A')})")
            break
    
    if simulation_count >= max_simulations:
        print(f"‚ùå √âCHEC: Game did not complete after {max_simulations} simulations")
        return False
    
    # Test 3: V√©rifier que les gains VIP (game.earnings) correspondent exactement √† la somme des viewing_fee des VIPs assign√©s
    print("\nüîç TEST 3: COLLECTE AUTOMATIQUE DES GAINS VIP")
    print("-" * 60)
    
    # R√©cup√©rer l'√©tat final de la partie
    game_response = requests.get(f"{API_BASE}/games/{game_id}", timeout=10)
    
    if game_response.status_code != 200:
        print(f"‚ùå √âCHEC: Could not get final game data - HTTP {game_response.status_code}")
        return False
        
    final_game_data = game_response.json()
    actual_game_earnings = final_game_data.get('earnings', 0)
    vip_earnings_collected = final_game_data.get('vip_earnings_collected', False)
    
    print(f"   üìä Gains VIP dans game.earnings: {actual_game_earnings:,}$")
    print(f"   üìä Viewing_fee total attendu: {total_vip_viewing_fees:,}$")
    print(f"   üìä VIP earnings collected flag: {vip_earnings_collected}")
    
    # V√©rifier que les gains correspondent exactement
    earnings_match = (actual_game_earnings == total_vip_viewing_fees)
    
    if earnings_match:
        print(f"   ‚úÖ SUCC√àS: Les gains VIP correspondent exactement aux viewing_fee")
    else:
        print(f"   ‚ùå PROBL√àME: Les gains VIP ne correspondent pas")
        print(f"   ‚ùå Diff√©rence: {abs(actual_game_earnings - total_vip_viewing_fees):,}$ ({((actual_game_earnings / total_vip_viewing_fees) * 100):.1f}% des gains attendus)")
    
    # Test 4: V√©rifier que les gains ont √©t√© automatiquement ajout√©s au gamestate (portefeuille du joueur)
    print("\nüîç TEST 4: COH√âRENCE - V√âRIFICATION DU GAMESTATE")
    print("-" * 60)
    
    # R√©cup√©rer l'√©tat du gamestate pour v√©rifier l'argent
    gamestate_response = requests.get(f"{API_BASE}/gamestate/", timeout=10)
    
    if gamestate_response.status_code != 200:
        print(f"‚ùå √âCHEC: Could not get gamestate - HTTP {gamestate_response.status_code}")
        return False
        
    gamestate_data = gamestate_response.json()
    current_money = gamestate_data.get('money', 0)
    total_earnings = gamestate_data.get('game_stats', {}).get('total_earnings', 0)
    
    print(f"   üí∞ Argent actuel dans le gamestate: {current_money:,}$")
    print(f"   üìà Total des gains accumul√©s: {total_earnings:,}$")
    
    # V√©rifier que game.vip_earnings_collected=true
    if vip_earnings_collected:
        print(f"   ‚úÖ SUCC√àS: Flag vip_earnings_collected = true")
    else:
        print(f"   ‚ùå PROBL√àME: Flag vip_earnings_collected = false")
    
    # Test final: V√©rifier que les gains VIP ne peuvent plus √™tre collect√©s manuellement
    print("\nüîç TEST FINAL: V√âRIFICATION COLLECTE MANUELLE IMPOSSIBLE")
    print("-" * 60)
    
    # Tenter de collecter manuellement (devrait √©chouer car d√©j√† collect√© automatiquement)
    manual_collect_response = requests.post(f"{API_BASE}/games/{game_id}/collect-vip-earnings", timeout=10)
    
    if manual_collect_response.status_code == 400:
        print(f"   ‚úÖ SUCC√àS: Collecte manuelle refus√©e (d√©j√† collect√© automatiquement)")
    else:
        print(f"   ‚ùå PROBL√àME: Collecte manuelle autoris√©e (ne devrait pas √™tre possible)")
        print(f"   ‚ùå HTTP {manual_collect_response.status_code}: {manual_collect_response.text}")
    
    # R√©sum√© final
    print("\nüìã R√âSUM√â DES TESTS VIP AUTOMATIC COLLECTION")
    print("=" * 60)
    
    all_tests_passed = earnings_match and vip_earnings_collected
    
    if all_tests_passed:
        print(f"‚úÖ SYST√àME DE COLLECTE AUTOMATIQUE FONCTIONNEL")
        print(f"   - Gains VIP ({actual_game_earnings:,}$) collect√©s automatiquement d√®s la fin de partie")
        print(f"   - Flag vip_earnings_collected correctement d√©fini")
        print(f"   - Coh√©rence entre viewing_fee des VIPs et gains calcul√©s")
        return True
    else:
        issues = []
        if not earnings_match:
            issues.append(f"Gains incorrects ({actual_game_earnings:,}$ vs {total_vip_viewing_fees:,}$)")
        if not vip_earnings_collected:
            issues.append("Flag vip_earnings_collected non d√©fini")
        
        print(f"‚ùå PROBL√àMES D√âTECT√âS:")
        for issue in issues:
            print(f"   - {issue}")
        return False

if __name__ == "__main__":
    success = test_vip_automatic_collection()
    if success:
        print("\nüéâ TOUS LES TESTS VIP AUTOMATIC COLLECTION R√âUSSIS!")
        sys.exit(0)
    else:
        print("\n‚ùå CERTAINS TESTS VIP AUTOMATIC COLLECTION ONT √âCHOU√â")
        sys.exit(1)